{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HUY VU\\\\Downloads\\\\wordiee-part-2\\\\src\\\\Components\\\\Keyboard\\\\KeyBoard.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Key from \"../Key/Key\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./keyboard.css\";\nimport wordList from \"../../words.json\";\nimport { decPos, incRow, setBoard } from \"../../redux/boardSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst KeyBoard = () => {\n  _s();\n\n  const position = useSelector(state => state.board.pos);\n  const board = useSelector(state => state.board.board);\n  const row = useSelector(state => state.board.row);\n  const correctWord = useSelector(state => state.board.correctWord);\n  const dispatch = useDispatch();\n  const rows = [\"q w e r t y u i o p\", \"a s d f g h j k l\", \"z x c v b n m\"];\n  let allWords = wordList.words;\n  let board5Words = `${board[position - 5]}${board[position - 4]}${board[position - 3]}${board[position - 2]}${board[position - 1]}`.toLowerCase();\n\n  const clickBack = () => {\n    if (Math.floor((position - 1) / 5) < row) return;\n    const newBoard = [...board];\n    newBoard[position - 1] = \"\";\n    dispatch(decPos());\n    dispatch(setBoard(newBoard));\n  };\n\n  const clickEnter = () => {\n    if (allWords.includes(board5Words) === false) {\n      alert(\"Invalid words\");\n    }\n\n    if (allWords.includes(board5Words)) {\n      if (position % 5 === 0 && position !== 0) {\n        dispatch(incRow());\n      }\n    }\n\n    if (position === 30 && allWords.includes(board5Words)) {\n      alert(\"The word is: \" + correctWord);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"keyboard-container\",\n    children: rows.map((row, idx) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [idx === 2 && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"letter-row\",\n          onClick: clickEnter,\n          children: \"Enter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 19\n        }, this), row.split(\" \").map((letter, idx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"letter-row\",\n            children: [/*#__PURE__*/_jsxDEV(Key, {\n              letter: letter.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 19\n            }, this), letter === \"m\" && /*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: clickBack,\n              children: \" Back \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 38\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(KeyBoard, \"DPfch/+qpkH5gcF7zdiuxATDv+g=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = KeyBoard;\nexport default KeyBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"KeyBoard\");","map":{"version":3,"sources":["C:/Users/HUY VU/Downloads/wordiee-part-2/src/Components/Keyboard/KeyBoard.tsx"],"names":["React","Key","useSelector","useDispatch","wordList","decPos","incRow","setBoard","KeyBoard","position","state","board","pos","row","correctWord","dispatch","rows","allWords","words","board5Words","toLowerCase","clickBack","Math","floor","newBoard","clickEnter","includes","alert","map","idx","split","letter","toUpperCase"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Key from \"../Key/Key\";\nimport {useSelector, useDispatch} from \"react-redux\";\nimport \"./keyboard.css\";\nimport wordList from \"../../words.json\";\nimport { rootState } from \"../interface\";\nimport { decPos, incRow, setBoard } from \"../../redux/boardSlice\";\n\nconst KeyBoard: React.FC = () => {\n  const position = useSelector((state:rootState)=>state.board.pos);\n  const board = useSelector((state:rootState)=>state.board.board);\n  const row = useSelector((state:rootState) => state.board.row);\n  const correctWord = useSelector((state:rootState)=>state.board.correctWord);\n  const dispatch = useDispatch();\n  const rows: string[] = [\n    \"q w e r t y u i o p\",\n    \"a s d f g h j k l\",\n    \"z x c v b n m\",\n  ];\n  let allWords: string[] = wordList.words;\n  let board5Words: string = `${board[position-5]}${board[position-4]}${board[position-3]}${board[position-2]}${board[position-1]}`.toLowerCase();\n  const clickBack = () => {\n    if (Math.floor((position-1)/5) < row) return;\n    const newBoard = [...board];\n    newBoard[position-1] = \"\";\n    dispatch(decPos());\n    dispatch(setBoard(newBoard));\n  }\n  const clickEnter = () => {\n    if (allWords.includes(board5Words) === false) {\n      alert(\"Invalid words\");\n    }\n    if(allWords.includes(board5Words)) {\n      if (position % 5 === 0 && position !== 0) {\n       dispatch(incRow());\n    }\n  }\n    if(position === 30 && allWords.includes(board5Words)) {\n      alert(\"The word is: \" + correctWord);\n    }\n  }\n  return (\n    <div className=\"keyboard-container\">\n      {rows.map((row, idx) => {\n        return (\n          <div className=\"row\">\n              {idx === 2 && (\n                  <span className=\"letter-row\" onClick={clickEnter}>\n                      Enter\n                  </span>\n              )\n              }\n            {row.split(\" \").map((letter, idx) => {\n              return (\n                <div className=\"letter-row\">\n                  <Key letter={letter.toUpperCase()} />\n                  {letter === \"m\" && <span onClick={clickBack}> Back </span>}\n                </div>\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default KeyBoard;\n"]},"metadata":{},"sourceType":"module"}